{"version":3,"sources":["components/Formulario.jsx","components/DateItem.jsx","App.js","index.js"],"names":["Formulario","crearCita","useState","petName","petOwner","phone","date","time","symptoms","cita","setCita","error","setError","handleChange","e","target","name","value","className","onSubmit","preventDefault","validate","Object","values","i","length","trim","id","uuidv4","htmlFor","type","alt","placeholder","onChange","required","cols","rows","DateItem","eliminarCita","onClick","propTypes","PropTypes","func","isRequired","App","citasIniciales","JSON","parse","localStorage","getItem","saveCitas","setSaveCitas","useEffect","setItem","stringify","citas","filter","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78b6b9c3.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst Formulario = ({crearCita}) => {\n   // Crear state de citas\n   const [cita, setCita] = useState({\n      petName: '',\n      petOwner: '',\n      phone: '',\n      date: '',\n      time: '',\n      symptoms:''\n   })\n\n   const [ error, setError ] = useState(false);\n\n\n   // Funcion que se ejecuta cad que el usuario escribe en un input\n\n   const handleChange = (e) => {\n      setCita({\n         ...cita,\n         [e.target.name] : e.target.value\n      })\n   }\n\n   // Extraer los valores para despues resetear el formulario mas adelante.\n\n   const { petName, petOwner, phone, date, time, symptoms } = cita\n\n   // Funcion que envia los datos del usuario cuando haga click en agregar cita\n\n   const submitCita = e => {\n      e.preventDefault();\n\n      // Validar\n      const validate = Object.values(cita);\n      for (let i = 0; i < validate.length; i++) {\n         validate[i].trim() === ''\n            ? setError(true)\n            : setError(false)\n      }\n\n      // Asignar un ID\n      cita.id = uuidv4();\n\n      // Crear la cita\n      crearCita(cita)\n\n      // Reiniciar el form\n      setCita({\n         petName: '',\n         petOwner: '',\n         phone: '',\n         date: '',\n         time: '',\n         symptoms: ''\n      })\n   }\n\n   return (\n      <Fragment>\n         <h2>Crear cita</h2>\n         { error \n            ?  <p className=\"alerta-error\">Todos los campos son obligatorios</p>\n            : null\n         }\n         <form \n            onSubmit={submitCita}\n         >\n            <label htmlFor=\"\">Nombre Mascota</label>\n            <input\n               type=\"text\"\n               name=\"petName\"\n               alt=\"Nombre de la mascota\"\n               placeholder=\"Nombre de la mascota\"\n               className=\"u-full-width\"\n               onChange={handleChange}\n               value={petName}\n               required\n            />\n            <label htmlFor=\"\">Nombre Dueño</label>\n            <input\n               type=\"text\"\n               name=\"petOwner\"\n               alt=\"Nombre del dueño\"\n               placeholder=\"Nombre del dueño\"\n               className=\"u-full-width\"\n               onChange={handleChange}\n               value={petOwner}\n               required\n            />\n            <label htmlFor=\"\">Número de contacto</label>\n            <input\n               type=\"tel\"\n               name=\"phone\"\n               alt=\"Número de contacto\"\n               placeholder=\"Numero de contacto\"\n               className=\"u-full-width\"\n               onChange={handleChange}\n               value={phone}\n               required\n            />\n            <label htmlFor=\"\">Fecha</label>\n            <input\n               type=\"date\"\n               name=\"date\"\n               alt=\"fecha de la cita\"\n               className=\"u-full-width\"\n               onChange={handleChange}\n               value={date}\n               required\n            />\n            <label htmlFor=\"\">Hora</label>\n            <input\n               type=\"time\"\n               name=\"time\"\n               alt=\"hora de la cita\"\n               className=\"u-full-width\"\n               onChange={handleChange}\n               value={time}\n               required\n            />\n            <label htmlFor=\"\">Sintomas</label>\n            <textarea \n               name=\"symptoms\"\n               cols=\"30\"\n               rows=\"10\"\n               placeholder=\"Agregar sintomas del pacience: vomito, diarrea, etc.\"\n               className=\"u-full-width\"\n               onChange={handleChange}\n               value={symptoms}\n               required\n            >\n            </textarea>\n            <button type=\"submit\" className=\"u-full-width button-primary\">Agregar cita</button>\n         </form>\n      </Fragment>\n   )\n}\n\nexport default Formulario\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst DateItem = ({ cita, eliminarCita }) => {\n\n   const { petName, petOwner, phone, date, time, symptoms, id } = cita;\n\n\n   return(\n      <div className='cita'>\n\n         <p>Mascota: <span>{ petName }</span></p>\n         <p>Dueño: <span>{ petOwner }</span></p>\n         <p>Numero de contacto: <span>{ phone}</span></p>\n         <p>Fecha: <span>{ date }</span></p>\n         <p>Hora: <span>{ time }</span></p>\n         <p>Sintomas: <span>{ symptoms }</span></p>\n         <button\n            className=\"button eliminar u-full-width\"\n            type=\"button\"\n            onClick={() => eliminarCita(id)}\n            >Eliminar &times;</button>\n      </div>\n   )\n}\n\nDateItem.propTypes = {\n   cita : PropTypes.object.isRequired,\n   eliminarCita: PropTypes.func.isRequired\n}\n\nexport default DateItem\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types'\n\nimport Formulario from './components/Formulario.jsx';\nimport DateItem from './components/DateItem.jsx';\n\nfunction App() {\n\n  // Citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'))\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  // Arreglo de citas\n  const [saveCitas, setSaveCitas] = useState(citasIniciales ? citasIniciales : []);\n\n  // useEffect para realizar ciertas operaciones cuando el state cambia\n\n  // Con esta funcion haremos que cada vez que haya nuevas citas o el state de citas cambie, estas se almacenen en el local storage\n  useEffect(() => {\n    if(citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(saveCitas))\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]))\n    }\n  }, [saveCitas, citasIniciales]) \n\n  // Funcion que guarde las citas en el state\n  const crearCita = cita => {\n    setSaveCitas([\n      ...saveCitas,\n      cita\n    ])\n  }\n\n  // Funcion que elimina una cita por su id\n  const eliminarCita = id => {\n      const citas = saveCitas.filter(cita => cita.id !== id);\n      setSaveCitas(citas);\n  }\n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n              crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            {saveCitas.length === 0 \n              ? <h2>Agrega una nueva cita</h2>\n              : <h2>Lista de citas</h2>\n            }\n            {saveCitas.map(cita => (\n              <DateItem\n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\n// Documentacion de los componentes\nFormulario.propTypes = {\n  crearCita: PropTypes.func.isRequired\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}